#include "../s21_matrix.h"
#include <check.h>
#include <math.h>
#include <stdio.h>


#test test_create_matrix

    matrix_t m;
    int result = s21_create_matrix(3, 3, &m);
    ck_assert(result == OK);
    ck_assert(m.rows == 3 && m.columns == 3);
    ck_assert(m.matrix != NULL);
 
#test test_incorrect_matrix

    matrix_t m;
    int result = s21_create_matrix(0, 0, &m);
    ck_assert_int_eq(result, INCORRECT_MATRIX);
    
#test test_create_calloc

    matrix_t m;
    int result = s21_create_matrix(-100000000, 1, &m);
    ck_assert_int_eq(result, CALCULATION_FAIL);
   
#test test_create_calloc1
    matrix_t m;
    int result = s21_create_matrix(1, -100000, &m);
    ck_assert_int_eq(result, CALCULATION_FAIL);

#test test_remove_matrix

  
    matrix_t m;
    m.rows = 3;
    m.columns = 3;
    m.matrix = (double**)calloc(m.rows, sizeof(double*));
    for (int i = 0; i < m.rows; i++) {
        m.matrix[i] = (double*)calloc(m.columns, sizeof(double));
    }


    ck_assert_ptr_nonnull(m.matrix);
    for (int i = 0; i < m.rows; i++) {
        ck_assert_ptr_nonnull(m.matrix[i]);
    }

 
    s21_remove_matrix(&m);

    ck_assert_ptr_eq(m.matrix, NULL);  
    ck_assert_int_eq(m.rows, 0);    
    ck_assert_int_eq(m.columns, 0);   

    #test test_s21_eq_matrix
        matrix_t m;
        s21_create_matrix(3,3, &m);
        matrix_t m1;
        s21_create_matrix(4,3, &m1);
        int result = s21_eq_matrix(&m, &m1);
        ck_assert_int_eq(result, FAILURE);
       
    #test test_s21_eq_matrix_identical
  matrix_t m1, m2;
  s21_create_matrix(2, 2, &m1);
  s21_create_matrix(2, 2, &m2);

  m1.matrix[0][0] = 1.0; m1.matrix[0][1] = 2.0;
  m1.matrix[1][0] = 3.0; m1.matrix[1][1] = 4.0;

  m2.matrix[0][0] = 1.0; m2.matrix[0][1] = 2.0;
  m2.matrix[1][0] = 3.0; m2.matrix[1][1] = 4.0;

  int result = s21_eq_matrix(&m1, &m2);
  ck_assert_int_eq(result, SUCCESS);

  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);

#test test_s21_eq_matrix_different_values
  matrix_t m1, m2;
  s21_create_matrix(2, 2, &m1);
  s21_create_matrix(2, 2, &m2);

  m1.matrix[0][0] = 1.0; m1.matrix[0][1] = 2.0;
  m1.matrix[1][0] = 3.0; m1.matrix[1][1] = 4.0;

  m2.matrix[0][0] = 1.0; m2.matrix[0][1] = 2.0;
  m2.matrix[1][0] = 3.0; m2.matrix[1][1] = 5.0;  

  int result = s21_eq_matrix(&m1, &m2);
  ck_assert_int_eq(result, FAILURE);

  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);

#test test_s21_sum_matrix_valid

    matrix_t A, B, result;
    s21_create_matrix(2, 2, &A); // 2x2
    s21_create_matrix(2, 2, &B); // 2x2

    A.matrix[0][0] = 1.0;
    A.matrix[0][1] = 2.0;
    A.matrix[1][0] = 3.0;
    A.matrix[1][1] = 4.0;

    B.matrix[0][0] = 5.0;
    B.matrix[0][1] = 6.0;
    B.matrix[1][0] = 7.0;
    B.matrix[1][1] = 8.0;

    int result_code = s21_sum_matrix(&A, &B, &result);

    ck_assert_int_eq(result_code, OK);

    ck_assert_double_eq(result.matrix[0][0], 6.0);
    ck_assert_double_eq(result.matrix[0][1], 8.0);
    ck_assert_double_eq(result.matrix[1][0], 10.0);
    ck_assert_double_eq(result.matrix[1][1], 12.0);

 
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&result);

#test test_s21_sum_matrix_invalid_size
   
    matrix_t A, B, result;
    s21_create_matrix(2, 2, &A); // 2x2
    s21_create_matrix(3, 3, &B); // 3x3

    A.matrix[0][0] = 1.0;
    A.matrix[0][1] = 2.0;
    A.matrix[1][0] = 3.0;
    A.matrix[1][1] = 4.0;

 
    B.matrix[0][0] = 5.0;
    B.matrix[0][1] = 6.0;
    B.matrix[0][2] = 7.0;
    B.matrix[1][0] = 8.0;
    B.matrix[1][1] = 9.0;
    B.matrix[1][2] = 10.0;
    B.matrix[2][0] = 11.0;
    B.matrix[2][1] = 12.0;
    B.matrix[2][2] = 13.0;


    int result_code = s21_sum_matrix(&A, &B, &result);

    ck_assert_int_eq(result_code, CALCULATION_FAIL);

    // Освобождаем память
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_s21_sub_matrix

matrix_t A, B, result;
    s21_create_matrix(2, 2, &A); // 2x2
    s21_create_matrix(2, 2, &B); // 2x2

    A.matrix[0][0] = 1.0;
    A.matrix[0][1] = 2.0;
    A.matrix[1][0] = 3.0;
    A.matrix[1][1] = 4.0;

    B.matrix[0][0] = 5.0;
    B.matrix[0][1] = 6.0;
    B.matrix[1][0] = 7.0;
    B.matrix[1][1] = 8.0;
int result_code = s21_sub_matrix(&A, &B, &result);
ck_assert_int_eq(result_code, OK);
ck_assert_int_eq(result.matrix[0][0], -4.0);
ck_assert_int_eq(result.matrix[0][1], -4.0);
ck_assert_int_eq(result.matrix[1][0], -4.0);
ck_assert_int_eq(result.matrix[1][1], -4.0);


#test test_21_sub_invalid_size
matrix_t A, B, result;
    s21_create_matrix(2, 2, &A); // 2x2
    s21_create_matrix(3, 3, &B); // 3x3

    A.matrix[0][0] = 1.0;
    A.matrix[0][1] = 2.0;
    A.matrix[1][0] = 3.0;
    A.matrix[1][1] = 4.0;

 
    B.matrix[0][0] = 5.0;
    B.matrix[0][1] = 6.0;
    B.matrix[0][2] = 7.0;
    B.matrix[1][0] = 8.0;
    B.matrix[1][1] = 9.0;
    B.matrix[1][2] = 10.0;
    B.matrix[2][0] = 11.0;
    B.matrix[2][1] = 12.0;
    B.matrix[2][2] = 13.0;


    int result_code = s21_sub_matrix(&A, &B, &result);

    ck_assert_int_eq(result_code, CALCULATION_FAIL);

    // Освобождаем память
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);


#test test_s21_mult_matrix_correct 
    matrix_t A, B, result;

    s21_create_matrix(2, 3, &A);
    s21_create_matrix(3, 2, &B);

    A.matrix[0][0] = 1; A.matrix[0][1] = 2; A.matrix[0][2] = 3;
    A.matrix[1][0] = 4; A.matrix[1][1] = 5; A.matrix[1][2] = 6;

    B.matrix[0][0] = 7; B.matrix[0][1] = 8;
    B.matrix[1][0] = 9; B.matrix[1][1] = 10;
    B.matrix[2][0] = 11; B.matrix[2][1] = 12;

    int result_code = s21_mult_matrix(&A, &B, &result);

    ck_assert_int_eq(result_code, OK);
    ck_assert_double_eq(result.matrix[0][0], 58);
    ck_assert_double_eq(result.matrix[0][1], 64);
    ck_assert_double_eq(result.matrix[1][0], 139);
    ck_assert_double_eq(result.matrix[1][1], 154);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&result);

#test test_s21_mult_matrix_incorrect 
    matrix_t A, B, result;

    s21_create_matrix(2, 3, &A);
    s21_create_matrix(2, 2, &B);

    int result_code = s21_mult_matrix(&A, &B, &result);

    ck_assert_int_eq(result_code, INCORRECT_MATRIX);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_s21_mult_number_1
    matrix_t A, result;

    s21_create_matrix(2, 2, &A);

    A.matrix[0][0] = 1; A.matrix[0][1] = 2;
    A.matrix[1][0] = 3; A.matrix[1][1] = 4;

    double number = 2.5;
    int result_code = s21_mult_number(&A, number, &result);

    ck_assert_int_eq(result_code, OK);
    ck_assert_double_eq(result.matrix[0][0], 2.5);
    ck_assert_double_eq(result.matrix[0][1], 5.0);
    ck_assert_double_eq(result.matrix[1][0], 7.5);
    ck_assert_double_eq(result.matrix[1][1], 10.0);

    s21_remove_matrix(&A);
    s21_remove_matrix(&result);

#test test_21_mult_number_2

 matrix_t A = {};
  matrix_t result = {};
  matrix_t eq_matrix = {};
  double number = 2;
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 1, A.matrix[0][1] = 2, A.matrix[0][2] = 3;
  A.matrix[1][0] = 0, A.matrix[1][1] = 4, A.matrix[1][2] = 2;
  A.matrix[2][0] = 2, A.matrix[2][1] = 3, A.matrix[2][2] = 4;
  s21_create_matrix(3, 3, &eq_matrix);
  eq_matrix.matrix[0][0] = 2, eq_matrix.matrix[0][1] = 4,
  eq_matrix.matrix[0][2] = 6;
  eq_matrix.matrix[1][0] = 0, eq_matrix.matrix[1][1] = 8,
  eq_matrix.matrix[1][2] = 4;
  eq_matrix.matrix[2][0] = 4, eq_matrix.matrix[2][1] = 6,
  eq_matrix.matrix[2][2] = 8;
  ck_assert_int_eq(s21_mult_number(&A, number, &result), OK);
  ck_assert_int_eq(s21_eq_matrix(&result, &eq_matrix), SUCCESS);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);
  s21_remove_matrix(&eq_matrix);

#test test_s21_transpose_1
    
    matrix_t A, result;
    s21_create_matrix(3, 2, &A);

    A.matrix[0][0] = 1; A.matrix[2][0] = 3; A.matrix[1][1] = 5;
    A.matrix[1][0] = 2; A.matrix[0][1] = 4; A.matrix[2][1] = 6;

    int result_code = s21_transpose(&A, &result);

    ck_assert_int_eq(result_code, OK);
    ck_assert_int_eq(result.rows, 2);
    ck_assert_int_eq(result.columns, 3);

    ck_assert_double_eq(result.matrix[0][0], 1);
    ck_assert_double_eq(result.matrix[0][1], 2);
    ck_assert_double_eq(result.matrix[0][2], 3);
    ck_assert_double_eq(result.matrix[1][0], 4);
    ck_assert_double_eq(result.matrix[1][1], 5);
    ck_assert_double_eq(result.matrix[1][2], 6);

    s21_remove_matrix(&A);
    s21_remove_matrix(&result);
#test test_s21_transpose_2

  matrix_t A = {};
  matrix_t result = {};
  matrix_t eq_matrix = {};
  s21_create_matrix(3, 2, &A);
  s21_create_matrix(2, 3, &eq_matrix);
  A.matrix[0][0] = 1, A.matrix[0][1] = 4;
  A.matrix[1][0] = 2, A.matrix[1][1] = 5;
  A.matrix[2][0] = 3, A.matrix[2][1] = 6;
  ck_assert_int_eq(s21_transpose(&A, &result), OK);
  eq_matrix.matrix[0][0] = 1, eq_matrix.matrix[0][1] = 2,
  eq_matrix.matrix[0][2] = 3;
  eq_matrix.matrix[1][0] = 4, eq_matrix.matrix[1][1] = 5,
  eq_matrix.matrix[1][2] = 6;
  ck_assert_int_eq(s21_eq_matrix(&result, &eq_matrix), SUCCESS);
  ck_assert_int_eq(result.rows, 2);
  ck_assert_int_eq(result.columns, 3);
  s21_remove_matrix(&A);
  s21_remove_matrix(&eq_matrix);
  s21_remove_matrix(&result);

#test test_calc_complements_1
      int res = 0;
  matrix_t A = {0};
  matrix_t Z = {0};
  matrix_t X = {0};

  s21_create_matrix(4, 4, &A);
  A.matrix[0][0] = 112.0;
  A.matrix[0][1] = 243.0;
  A.matrix[0][2] = 3.0;
  A.matrix[0][3] = -8.0;
  A.matrix[1][0] = 47.0;
  A.matrix[1][1] = 51.0;
  A.matrix[1][2] = -66.0;
  A.matrix[1][3] = 99.0;
  A.matrix[2][0] = -74.0;
  A.matrix[2][1] = 85.0;
  A.matrix[2][2] = 97.0;
  A.matrix[2][3] = 63.0;
  A.matrix[3][0] = -13.0;
  A.matrix[3][1] = 79.0;
  A.matrix[3][2] = -99.0;
  A.matrix[3][3] = -121.0;

  s21_calc_complements(&A, &Z);

  s21_create_matrix(4, 4, &X);

  X.matrix[0][0] = -2879514.0;
  X.matrix[0][1] = -1236631.0;
  X.matrix[0][2] = -1685096.0;
  X.matrix[0][3] = 880697.0;
  X.matrix[1][0] = 1162090.0;
  X.matrix[1][1] = -714015.0;
  X.matrix[1][2] = 4046255.0;
  X.matrix[1][3] = -3901600.0;
  X.matrix[2][0] = 4362897.0;
  X.matrix[2][1] = -2049432.0;
  X.matrix[2][2] = -532912.0;
  X.matrix[2][3] = -1370781.0;
  X.matrix[3][0] = 3412773.0;
  X.matrix[3][1] = -1569493.0;
  X.matrix[3][2] = 3144517.0;
  X.matrix[3][3] = 1284666.0;

  res = s21_eq_matrix(&X, &Z);

  s21_remove_matrix(&A);
  s21_remove_matrix(&X);
  s21_remove_matrix(&Z);

  ck_assert_int_eq(res, OK);
  

  #test test_calc_complements_2

    matrix_t A = {};
  matrix_t result = {};
  matrix_t eq_matrix = {};
  s21_create_matrix(3, 3, &A);
  s21_create_matrix(3, 3, &eq_matrix);
  A.matrix[0][0] = 1, A.matrix[0][1] = 2, A.matrix[0][2] = 3;
  A.matrix[1][0] = 0, A.matrix[1][1] = 4, A.matrix[1][2] = 2;
  A.matrix[2][0] = 5, A.matrix[2][1] = 2, A.matrix[2][2] = 1;
  ck_assert_int_eq(s21_calc_complements(&A, &result), OK);
  eq_matrix.matrix[0][0] = 0, eq_matrix.matrix[0][1] = 10,
  eq_matrix.matrix[0][2] = -20;
  eq_matrix.matrix[1][0] = 4, eq_matrix.matrix[1][1] = -14,
  eq_matrix.matrix[1][2] = 8;
  eq_matrix.matrix[2][0] = -8, eq_matrix.matrix[2][1] = -2,
  eq_matrix.matrix[2][2] = 4;
  ck_assert_int_eq(s21_eq_matrix(&result, &eq_matrix), SUCCESS);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);
  s21_remove_matrix(&eq_matrix);



#test s21_determinant_1
  double determ = 0.0;
  matrix_t A = {0};

  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 4000.87;
  A.matrix[0][1] = 454.0;
  A.matrix[0][2] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 1.897;
  A.matrix[1][2] = 3.0;
  A.matrix[2][0] = 0.000087;
  A.matrix[2][1] = 2.5668;
  A.matrix[2][2] = 1.0;

  s21_determinant(&A, &determ);
  ck_assert_double_eq(determ, -24105.996724156);
  s21_remove_matrix(&A);

#test s21_determinant_2

  matrix_t A = {};
  double det = 0.0;
  s21_create_matrix(1, 1, &A);
  A.matrix[0][0] = 21;
  ck_assert_int_eq(s21_determinant(&A, &det), OK);
  ck_assert_double_eq(det, 21);
  s21_remove_matrix(&A);


#test test_inverse_matrix_1

  int res = 0;
  matrix_t A = {0};
  matrix_t Z = {0};
  matrix_t X = {0};

  s21_create_matrix(4, 4, &A);
  A.matrix[0][0] = -1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 7.0;
  A.matrix[0][3] = 9.0;
  A.matrix[1][0] = 1.0;
  A.matrix[1][1] = 0.0;
  A.matrix[1][2] = 0.0;
  A.matrix[1][3] = 0.0;
  A.matrix[2][0] = 47.0;
  A.matrix[2][1] = 13.0;
  A.matrix[2][2] = 17.0;
  A.matrix[2][3] = 21.0;
  A.matrix[3][0] = 22.0;
  A.matrix[3][1] = 7.0;
  A.matrix[3][2] = 1.0;
  A.matrix[3][3] = 3.0;

  s21_inverse_matrix(&A, &Z);

  s21_create_matrix(4, 4, &X);

  X.matrix[0][0] = 0.0;
  X.matrix[0][1] = 1.0;
  X.matrix[0][2] = 0.0;
  X.matrix[0][3] = 0.0;
  X.matrix[1][0] = -5.0 / 23.0;
  X.matrix[1][1] = -121.0 / 23.0;
  X.matrix[1][2] = 2.0 / 23.0;
  X.matrix[1][3] = 1.0 / 23.0;
  X.matrix[2][0] = -18.0 / 23.0;
  X.matrix[2][1] = -379.0 / 46.0;
  X.matrix[2][2] = 19.0 / 46.0;
  X.matrix[2][3] = -25.0 / 46.0;
  X.matrix[3][0] = 53.0 / 69.0;
  X.matrix[3][1] = 1061.0 / 138.0;
  X.matrix[3][2] = -47.0 / 138.0;
  X.matrix[3][3] = 19.0 / 46.0;

  res = s21_eq_matrix(&X, &Z);

  s21_remove_matrix(&A);
  s21_remove_matrix(&X);
  s21_remove_matrix(&Z);

  ck_assert_int_eq(res, SUCCESS);

#test s21_inverse_matrix_2

matrix_t A = {};
  matrix_t result = {};
  matrix_t eq_matrix = {};
  s21_create_matrix(1, 1, &A);
  s21_create_matrix(1, 1, &eq_matrix);
  A.matrix[0][0] = 21;
  eq_matrix.matrix[0][0] = 1.0 / 21.0;
  ck_assert_int_eq(s21_inverse_matrix(&A, &result), OK);
  ck_assert_int_eq(s21_eq_matrix(&result, &eq_matrix), SUCCESS);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);
  s21_remove_matrix(&eq_matrix);
